$ops = @(
    @{ add = '.editorconfig'; msg = 'chore(repo): add editorconfig and normalize line-endings' },
    @{ add = '.'; msg = 'chore(prettier): configure prettier and format base' },
    @{ add = '.'; msg = 'chore(eslint): add minimal eslint config with react and ts' },
    @{ add = 'vite.config.ts vite.config.server.ts'; msg = 'build(vite): split client/server build commands confirmed' },
    @{ add = 'tsconfig.json'; msg = 'chore(types): tighten tsconfig options and path aliases' },
    @{ add = 'vite.config.*'; msg = 'build(aliases): verify @ and @shared alias resolution' },
    @{ add = 'package.json pnpm-lock.yaml'; msg = 'chore(deps): audit and bump minor dev deps' },
    @{ add = '.github/workflows/*'; msg = 'ci: add basic workflow for lint and typecheck' },
    @{ add = '.husky/*'; msg = 'chore(husky): pre-commit format and typecheck hooks' },
    @{ add = '.gitignore'; msg = 'chore(gitignore): ignore dist and temp artifacts' },
    @{ add = 'README.md'; msg = 'docs(README): project overview and dev steps' },
    @{ add = 'polyfills.ts'; msg = 'refactor(shims): guard globals polyfill for idempotency' },
    @{ add = '.env.sample'; msg = 'chore(env): add .env.sample with API url' },
    @{ add = 'netlify.toml'; msg = 'build(netlify): verify netlify.toml functions path' },
    @{ add = 'vitest.config.ts'; msg = 'build(vitest): scaffold test runner config' },
    @{ add = 'src/lib/logging.ts'; msg = 'chore(logging): unify debug flags across client/server' },
    @{ add = 'tailwind.config.ts'; msg = 'feat(ui/colors): set tailwind color tokens and themes' },
    @{ add = 'src/components/ui/button.tsx'; msg = 'feat(ui/button): add loading state and aria-busy' },
    @{ add = 'src/components/ui/input.tsx'; msg = 'feat(ui/input): create Input component' },
    @{ add = 'src/components/ui/form.tsx'; msg = 'feat(ui/form): add FormField helpers' },
    @{ add = 'src/components/ui/card.tsx'; msg = 'feat(ui/card): add Card primitives' },
    @{ add = 'src/components/ui/alert.tsx'; msg = 'feat(ui/alert): refine alert variants' },
    @{ add = 'src/components/ui/toast.tsx'; msg = 'fix(ui/toast): align radix toast animations' },
    @{ add = 'src/components/ui/sonner.tsx'; msg = 'feat(ui/sonner): system-aware theme sync' },
    @{ add = 'src/components/ui/tooltip.tsx'; msg = 'feat(ui/tooltip): add delay duration prop' },
    @{ add = 'src/components/ui/badge.tsx'; msg = 'feat(ui/badge): add status variants' },
    @{ add = 'src/components/ui/skeleton.tsx'; msg = 'feat(ui/skeleton): add Skeleton loader' },
    @{ add = 'src/lib/cva.ts'; msg = 'refactor(ui/cva): share variant helpers' },
    @{ add = 'src/components/ui/empty.tsx'; msg = 'feat(ui/empty): EmptyState component' },
    @{ add = 'src/components/ui/table.tsx'; msg = 'feat(ui/table): responsive table with stacked rows' },
    @{ add = 'src/styles/global.css'; msg = 'style(global): fine-tune typography scale' },
    @{ add = 'src/styles/global.css'; msg = 'perf(css): remove unused utilities' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'feat(layout): sticky header with glass background' },
    @{ add = 'src/layout/Nav.tsx'; msg = 'feat(layout): responsive nav with active state' },
    @{ add = 'src/layout/Footer.tsx'; msg = 'feat(layout): footer links and year auto-update' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'feat(layout): add container widths and gutters' },
    @{ add = 'src/components/nav/*'; msg = 'feat(nav): keyboard navigation focus ring' },
    @{ add = 'src/components/nav/*'; msg = 'fix(nav): avoid double wallet button on xs' },
    @{ add = 'src/components/ThemeToggle.tsx'; msg = 'feat(theme): add ThemeToggle button titles' },
    @{ add = 'src/lib/icons.ts'; msg = 'chore(icons): centralize icons map' },
    @{ add = 'src/routes/*'; msg = 'feat(routes): add /home alias route' },
    @{ add = 'src/components/nav/*'; msg = 'feat(nav): add external links aria labels' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'style(layout): reduce header padding on scroll' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'refactor(layout): split ActiveLink component' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'feat(layout): add skip-to-content link' },
    @{ add = 'src/components/nav/*'; msg = 'a11y(nav): set nav landmarks and roles' },
    @{ add = 'tests/nav.test.tsx'; msg = 'test(nav): unit test ActiveLink highlight' },
    @{ add = 'src/layout/Layout.tsx'; msg = 'perf(layout): memoize header render' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): hero gradient background layer' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): CTA buttons with variants' },
    @{ add = 'src/pages/Home.tsx'; msg = 'content(home): feature grid copy improvements' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): how-it-works numbered cards' },
    @{ add = 'src/pages/Home.tsx'; msg = 'a11y(home): correct heading hierarchy' },
    @{ add = 'src/pages/Home.tsx'; msg = 'perf(home): lazy-load heavy decorations' },
    @{ add = 'src/pages/Home.tsx'; msg = 'style(home): tighten spacing scale' },
    @{ add = 'tests/home.test.tsx'; msg = 'test(home): snapshot for hero' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): add social proof placeholder section' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): add “Get started” link to dashboard' },
    @{ add = 'src/pages/Home.tsx'; msg = 'fix(home): link color contrast' },
    @{ add = 'src/pages/Home.tsx'; msg = 'feat(home): animated gradient accent' },
    @{ add = 'src/pages/Home.tsx'; msg = 'a11y(home): keyboard order for CTAs' },
    @{ add = 'src/pages/Home.tsx'; msg = 'perf(home): reduce DOM depth in hero' },
    @{ add = 'src/components/home/FeatureCard.tsx'; msg = 'refactor(home): extract FeatureCard component' },
    @{ add = 'src/pages/Home.tsx'; msg = 'chore(home): tidy imports' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'feat(dashboard): overview cards scaffold' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'feat(dashboard): list owned ASA IDs' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'feat(dashboard): empty state when no wallet' },
    @{ add = 'src/pages/admin/IssueIDDialog.tsx'; msg = 'feat(admin): IssueIDDialog UI baseline' },
    @{ add = 'src/pages/admin/IssueIDDialog.tsx'; msg = 'feat(admin): validation for address and ASA' },
    @{ add = 'src/pages/admin/IssueIDDialog.tsx'; msg = 'fix(admin): handle server error messages' },
    @{ add = 'src/components/DigitalIdCard.tsx'; msg = 'feat(dashboard): DigitalIdCard display fields' },
    @{ add = 'src/components/Dashboard.tsx'; msg = 'feat(dashboard): copy address button' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'a11y(dashboard): semantic sections and headings' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'perf(dashboard): virtualize long ID list' },
    @{ add = 'src/hooks/useDashboard.ts'; msg = 'refactor(dashboard): isolate fetch hook' },
    @{ add = 'tests/dashboard.test.tsx'; msg = 'test(dashboard): mock API and render tests' },
    @{ add = 'src/pages/admin/*'; msg = 'feat(admin): revoke/freeze action placeholders' },
    @{ add = 'src/pages/admin/*'; msg = 'feat(admin): onIssued refetch integration' },
    @{ add = 'src/pages/admin/*'; msg = 'fix(admin): disable actions when connecting' },
    @{ add = 'docs/ADMIN_FLOW.md'; msg = 'docs(admin): issuance flow diagram' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'feat(verify): form with address and assetId' },
    @{ add = 'src/components/QRScanner.tsx'; msg = 'feat(verify): QR scanner stub component' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'fix(verify): error messages via sonner' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'a11y(verify): label inputs and hints' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'perf(verify): debounce requests' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'feat(verify): persist last check in localStorage' },
    @{ add = 'src/hooks/useVerify.ts'; msg = 'refactor(verify): extract useVerify hook' },
    @{ add = 'tests/verify.test.tsx'; msg = 'test(verify): happy/denied cases' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'feat(verify): copyable result token' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'style(verify): panel and layout polish' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'fix(verify): clear button resets state' },
    @{ add = 'docs/VERIFY_GUIDE.md'; msg = 'docs(verify): usage notes' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'feat(verify): server status badge' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'feat(verify): deep link support for query params' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'fix(verify): validate numeric assetId' },
    @{ add = 'src/pages/Verify.tsx'; msg = 'perf(verify): avoid setState when unmounted' },
    @{ add = 'src/hooks/useWallet.ts src/components/WalletButton.tsx'; msg = 'feat(wallet): connect/disconnect UX states' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'fix(wallet): reconnect session guard' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'feat(wallet): short address formatting' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'feat(wallet): mobile deep link guidance' },
    @{ add = 'src/components/WalletButton.tsx'; msg = 'a11y(wallet): buttons labels and titles' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'perf(wallet): avoid re-renders via refs' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'feat(wallet): network indicator (TestNet)' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'fix(wallet): error mapping for common issues' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'feat(wallet): expose signTxn helper stub' },
    @{ add = 'src/context/WalletContext.ts'; msg = 'refactor(wallet): split context and hook' },
    @{ add = 'tests/wallet.test.ts'; msg = 'test(wallet): simulate connect/disconnect' },
    @{ add = 'docs/WALLET_GUIDE.md'; msg = 'docs(wallet): troubleshooting section' },
    @{ add = 'src/pages/Dashboard.tsx'; msg = 'feat(wallet): dashboard CTA connect button' },
    @{ add = 'src/components/toast.tsx'; msg = 'fix(wallet): toast text consistency' },
    @{ add = 'src/types/wallet.d.ts'; msg = 'chore(wallet): types for Pera events' },
    @{ add = 'src/hooks/useWallet.ts'; msg = 'perf(wallet): tree-shake Pera import' },
    @{ add = 'src/server/api/ids.ts'; msg = 'feat(api): ids route query owner param' },
    @{ add = 'src/server/api/issue-id.ts'; msg = 'feat(api): issue-id POST payload validation' },
    @{ add = 'src/server/api/*'; msg = 'fix(api): 400 invalid wallet address message clarity' },
    @{ add = 'src/server/api/verify-id.ts'; msg = 'feat(api): verify-id GET returns reason' },
    @{ add = 'src/server/schema/zod.ts'; msg = 'refactor(api): extract schema to shared zod' },
    @{ add = 'tests/api/*'; msg = 'test(api): unit test id utilities' },
    @{ add = 'docs/API_REFERENCE.md'; msg = 'docs(api): endpoints reference' },
    @{ add = 'src/server/*'; msg = 'perf(api): cache control headers for GET' },
    @{ add = 'src/server/middleware/*'; msg = 'feat(api): error middleware JSON shape' },
    @{ add = 'src/server/api/*'; msg = 'fix(api): handle CORS preflight' },
    @{ add = 'src/server/api/health.ts'; msg = 'feat(api): health route /api/health' },
    @{ add = 'src/server/routes/*'; msg = 'refactor(api): route modules structure' },
    @{ add = 'src/lib/logging.ts'; msg = 'chore(api): logging with levels' },
    @{ add = 'tests/api/e2e/*'; msg = 'test(api): e2e serverless function harness' },
    @{ add = 'src/server/utils/query.ts'; msg = 'fix(api): robust query parsing' },
    @{ add = 'node-build.ts'; msg = 'perf(api): reduce bundle size in node-build' },
    @{ add = 'src/styles/*'; msg = 'a11y(all): ensure color contrast across UI' },
    @{ add = 'src/styles/*'; msg = 'a11y(all): focus-visible styles and outlines' },
    @{ add = 'src/i18n/*'; msg = 'i18n(core): translation scaffolding and keys' },
    @{ add = 'src/i18n/*'; msg = 'i18n(copy): extract strings for pages' },
    @{ add = 'public/*'; msg = 'perf(assets): compress placeholder.svg and images' },
    @{ add = 'src/*'; msg = 'perf(react): memoize heavy components' },
    @{ add = 'src/routes/*'; msg = 'perf(network): prefetch routes on hover' },
    @{ add = 'tailwind.config.ts'; msg = 'perf(css): purge unused styles in build' },
    @{ add = 'src/middleware/security.ts'; msg = 'security(http): sanitize user inputs' },
    @{ add = 'src/utils/env.ts'; msg = 'security(secrets): guard env usage in client' },
    @{ add = 'src/utils/monitoring.ts'; msg = 'monitoring: suppress noisy console warns in prod' },
    @{ add = 'src/hooks/analytics.ts'; msg = 'analytics: add basic pageview hook (opt-in)' },
    @{ add = 'src/types/*'; msg = 'refactor(types): tighten IdRecord and API types' },
    @{ add = 'src/styles/*'; msg = 'style: unify border radii and shadows' },
    @{ add = 'CONTRIBUTING.md'; msg = 'docs: contributing guide and commit conventions' },
    @{ add = 'scripts/release.js'; msg = 'chore: add release script and changelog config' },
    @{ add = 'tests/ui/*'; msg = 'test(ui): button states and variants' },
    @{ add = 'tests/layout/*'; msg = 'test(layout): header/footer render' },
    @{ add = 'tests/home/*'; msg = 'test(home): CTA navigation works' },
    @{ add = 'tests/admin/*'; msg = 'test(admin): IssueIDDialog validation' },
    @{ add = 'tests/verify/*'; msg = 'test(verify): route param prefill' },
    @{ add = '.github/workflows/*'; msg = 'ci: add tests job and caching' },
    @{ add = '.github/workflows/*'; msg = 'ci: add build job and artifact upload' },
    @{ add = '.github/workflows/*'; msg = 'ci: add previews on PR via Netlify' },
    @{ add = 'docs/DEPLOYMENT_GUIDE.md'; msg = 'docs: deployment guide updates' },
    @{ add = 'docs/API_REFERENCE.md'; msg = 'docs(api): API reference polish' },
    @{ add = 'package.json'; msg = 'chore(version): bump minor for release' },
    @{ add = 'dist/'; msg = 'build: create production build' },
    @{ add = 'src/'; msg = 'perf: lighthouse pass fixes' },
    @{ add = 'docs/RELEASE_NOTES.md'; msg = 'docs: release notes v1.0' },
    @{ add = '__tag__'; msg = 'chore: tag v1.0.0' },
    @{ add = 'TODO.md'; msg = 'chore: post-release TODO backlog' }
)

foreach ($op in $ops) {
    if ($op.add -eq '__tag__') {
        git tag v1.0.0 -m $op.msg 2>$null
        if ($LASTEXITCODE -ne 0) { Write-Output "Tag v1.0.0 failed or already exists" }
        continue
    }
    # run add (supports multiple paths)
    git add $op.add 2>$null
    git commit -m $op.msg 2>$null
    if ($LASTEXITCODE -ne 0) {
        # create an empty commit so the message appears in history
        git commit --allow-empty -m $op.msg 2>$null
    }
}
Write-Output 'Batch commit script finished.'
